name: Build Python Wheels

on:
  workflow_dispatch:
  pull_request:
  push:
    branches:
      - master
      - release*

concurrency:
  group: compile-${{ github.ref }}
  cancel-in-progress: false

jobs:
  # Test the build with the latest CUDA toolkit and several Python versions
  build:
    strategy:
      fail-fast: false
      matrix:
        python: ['3.8', '3.9', '3.10', '3.11', '3.12']

    name: "Python ${{ matrix.python }} / NVCC (CUDA 12.6.3) / ubuntu-latest"
    runs-on: ubuntu-latest
    # see https://hub.docker.com/r/nvidia/cuda
    container: nvidia/cuda:12.6.3-devel-ubuntu24.04

    steps:
    - uses: actions/checkout@v4

    - name: Install dependencies
      run: apt-get update && DEBIAN_FRONTEND="noninteractive" apt-get install -y lsb-release unzip git && apt-get clean all

    - name: Setup Python ${{ matrix.python }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python }}

    - name: Install pypa/build
      run: >-
        python3 -m
        pip install
        build
        --user
    - name: Build a binary wheel and a source tarball
      run: python3 -m build
    - name: Store the distribution packages
      uses: actions/upload-artifact@v4
      with:
        name: python-package-distributions
        path: dist/

  # # https://packaging.python.org/en/latest/guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows/
  # publish-to-pypi:
  #   name: Publish GGNN package to PyPI
  #   if: startsWith(github.ref, 'refs/tags/')
  #   needs:
  #   - build
  #   runs-on: ubuntu-latest
  #   environment:
  #     name: pypi
  #     url: https://pypi.org/p/pyGGNN
  #   permissions:
  #     id-token: write
  #
  #   steps:
  #   - name: Download all the dists
  #     uses: actions/download-artifact@v4
  #     with:
  #       name: python-package-distributions
  #       path: dist/
  #   - name: Publish distribution package to PyPI
  #     uses: pypa/gh-action-pypi-publish@release/v1

  github-release:
    name: Sign the Python distribution package with Sigstore and upload them to GitHub Release
    needs:
    - build
    runs-on: ubuntu-latest

    permissions:
      contents: write  # IMPORTANT: mandatory for making GitHub Releases
      id-token: write  # IMPORTANT: mandatory for sigstore

    steps:
    - name: Download all the dists
      uses: actions/download-artifact@v4
      with:
        name: python-package-distributions
        path: dist/
    - name: Sign the dists with Sigstore
      uses: sigstore/gh-action-sigstore-python@v3.0.0
      with:
        inputs: >-
          ./dist/*.tar.gz
          ./dist/*.whl
    - name: Create GitHub Release
      env:
        GITHUB_TOKEN: ${{ github.token }}
      run: >-
        gh release create
        "$GITHUB_REF_NAME"
        --repo "$GITHUB_REPOSITORY"
        --notes ""
    - name: Upload artifact signatures to GitHub Release
      env:
        GITHUB_TOKEN: ${{ github.token }}
      # Upload to GitHub Release using the `gh` CLI.
      # `dist/` contains the built packages, and the
      # sigstore-produced signatures and certificates.
      run: >-
        gh release upload
        "$GITHUB_REF_NAME" dist/**
        --repo "$GITHUB_REPOSITORY"
